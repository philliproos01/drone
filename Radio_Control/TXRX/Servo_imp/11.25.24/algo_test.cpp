
#include <cmath>
#define PI 3.1415926535897932384626433832795
#include <iostream>
#include <array>
float AccX, AccY, AccZ;
float GyroX, GyroY, GyroZ;
float accAngleX, accAngleY, gyroAngleX, gyroAngleY, gyroAngleZ;
float roll, pitch, yaw;
float AccErrorX, AccErrorY, GyroErrorX, GyroErrorY, GyroErrorZ;
float elapsedTime, currentTime, previousTime;

//const int DATA_SIZE = 189;

std::array<float, 200> X = {
    0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.01f, 0.02f, 0.02f,
    0.02f, 0.02f, 0.01f, 0.01f, 0.01f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
    0.02f, 0.02f, 0.02f, 0.02f, 0.01f, 0.01f, 0.02f, 0.02f, 0.02f, 0.02f,
    0.02f, 0.02f, 0.01f, 0.01f, 0.02f, 0.02f, 0.02f, 0.01f, 0.01f, 0.01f,
    0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.01f, 0.02f, 0.02f, 0.01f, 0.02f,
    0.02f, 0.01f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.01f,
    0.01f, 0.02f, 0.02f, 0.02f, 0.02f, 0.01f, 0.01f, 0.01f, 0.02f, 0.02f,
    0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
    0.02f, 0.02f, 0.01f, 0.01f, 0.02f, 0.02f, 0.02f, 0.02f, 0.01f, 0.01f,
    0.01f, 0.02f, 0.02f, 0.01f, 0.01f, 0.02f, 0.02f, 0.01f, 0.01f, 0.02f,
    0.02f, 0.02f, 0.01f, 0.02f, 0.02f, 0.02f, 0.02f, 0.01f, 0.02f, 0.02f,
    0.02f, 0.01f, 0.01f, 0.02f, 0.02f, 0.01f, 0.01f, 0.01f, 0.02f, 0.02f,
    0.02f, 0.02f, 0.02f, 0.01f, 0.01f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
    0.01f, 0.01f, 0.01f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.01f,
    0.02f, 0.02f, 0.02f, 0.02f, 0.01f, 0.01f, 0.01f, 0.01f, 0.02f, 0.02f,
    0.01f, 0.01f, 0.01f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
    0.02f, 0.01f, 0.02f, 0.02f, 0.01f, 0.01f, 0.01f, 0.02f, 0.02f, 0.02f,
    0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.01f,
    0.01f, 0.01f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f, 0.02f,
    0.02f, 0.01f, 0.01f, 0.01f, 0.01f, 0.02f, 0.02f, 0.02f, 0.02f, 0.01f
};

std::array<float, 200> Y = {
    0.09f, 0.09f, 0.09f, 0.10f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f,
    0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.09f, 0.09f, 0.10f, 0.10f, 0.09f,
    0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.10f, 0.10f,
    0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.10f, 0.09f,
    0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f,
    0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f,
    0.10f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.10f, 0.10f, 0.09f, 0.09f,
    0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f,
    0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.10f, 0.10f, 0.10f, 0.09f, 0.09f,
    0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f,
    0.09f, 0.10f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f,
    0.09f, 0.10f, 0.10f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f,
    0.09f, 0.09f, 0.10f, 0.10f, 0.09f, 0.10f, 0.10f, 0.10f, 0.10f, 0.09f,
    0.09f, 0.09f, 0.09f, 0.10f, 0.10f, 0.10f, 0.09f, 0.09f, 0.09f, 0.09f,
    0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.10f, 0.09f, 0.09f,
    0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f,
    0.09f, 0.10f, 0.10f, 0.10f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.10f,
    0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.10f, 0.10f, 0.09f, 0.09f, 0.09f,
    0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f,
    0.10f, 0.10f, 0.10f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f
};

std::array<float, 200> Z = {
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.02f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.02f,
    1.02f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f,
    1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f, 1.01f
};

int main()
{
    AccY = 0;
    AccX = 0;
    AccZ = 0;
    AccErrorY = 0;
    AccErrorX = 0;
    std::cout<<"Hello World";
    for (int i = 0; i < 199; i++) {
        AccErrorX = AccErrorX + ((atan((Y[i]) / sqrt(pow((X[i]), 2) + pow((Z[i]), 2))) * 180 / PI));
        AccErrorY = AccErrorY + ((atan(-1 * (X[i]) / sqrt(pow((Y[i]), 2) + pow((Z[i]), 2))) * 180 / PI));
    }
    AccErrorX = AccErrorX / 200;
    AccErrorY = AccErrorY / 200;
  
    std::cout<< "Error X: " << AccErrorX << std::endl;
    std::cout<< "Error Y: " << AccErrorY << std::endl;
    return 0;
}
